services:
  backend:
#    container_name: backend
    image: ckala62rus/go-template-service
    build:
      context: .
      dockerfile: ./docker/go/DockerFile
#    ports:
#      - '5000:5000'
    volumes:
      - ./config_example.yml:/app/config/config.yml:ro
    environment:
      - JWT_SIGNING_KEY=${JWT_SIGNING_KEY:-development_key_32_characters_long}
      - ENV=${ENV:-development}
    env_file:
      - .env
    restart: unless-stopped
    deploy:
      replicas: 4
    # healthcheck:
    #   test: ["CMD", "wget", "-q", "--spider", "http://localhost:5000/api/hello/test"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 40s
    depends_on:
      - db_golang
      - go_redis
    networks:
      - app-network

  nginx-golang:
    image: nginx:1.25-alpine
    build:
      context: .
      dockerfile: ./docker/nginx/Dockerfile
    container_name: nginx-golang
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - nginx_logs:/var/log/nginx
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/conf.d:/etc/nginx/conf.d
      - ./docker/cert/cert.pem:/etc/nginx/ssl/cert.pem:ro
      - ./docker/cert/key.pem:/etc/nginx/ssl/key.pem:ro
#    restart: unless-stopped
#    healthcheck:
#      test: ["CMD", "wget", "-q", "--spider", "http://localhost:80/api/hello/test"]
#      interval: 30s
#      timeout: 5s
#      retries: 3
#      start_period: 10s
    depends_on:
      - backend
    networks:
      - app-network

#  worker:
#    container_name: worker
#    image: ckala62rus/go-template-worker
#    build:
#      context: .
#      dockerfile: ./docker/worker/DockerFile
#    volumes:
##      - ./src:/src
#      - ./config.yml:/src/config/config.yml
#    depends_on:
#      - db_golang
#      - backend

  # supervisor-go:
  #   container_name: supervisor-go
  #   build:
  #     context: .
  #     dockerfile: ./docker/supervisor/DockerFile
  #   tty: true
  #   env_file:
  #     - .env
  #   volumes:
  #     - ./src:/src
  #     - ./log:/var/log
  #   depends_on:
  #     - db_golang
  #     - backend

  db_golang:
    container_name: db_golang
    image: postgres:16.3-alpine3.20
    restart: unless-stopped
    ports:
      - "5433:5432"
    volumes:
      - pgdata_go:/var/lib/postgresql/data
      - postgres_backup:/tmp/backup
      - ./docker/db_conf/postgresql.conf:/etc/postgresql/postgresql.conf
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    env_file:
      - .env
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c password_encryption=md5
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-db}" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - app-network

  go_redis:
    image: redis:7.2-alpine
    container_name: go_redis
    ports:
      - "6380:6379"
    restart: unless-stopped
    environment:
      - TZ=Europe/Moscow
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
#    healthcheck:
#      test: ["CMD", "redis-cli", "ping"]
#      interval: 10s
#      timeout: 3s
#      retries: 5
#      start_period: 10s
    networks:
      - app-network

  pgbouncer:
    image: pgbouncer/pgbouncer:latest
    container_name: pgbouncer
    ports:
      - "6432:6432"
    environment:
      - DATABASES_HOST=db_golang
      - DATABASES_USER=postgres
      - DATABASES_PASSWORD=postgres
      - DATABASES_PORT=5432
      - DATABASES_DBNAME=db
      - POOL_MODE=transaction
      - MAX_CLIENT_CONN=1000
      - DEFAULT_POOL_SIZE=100
      - RESERVE_POOL_SIZE=50
      - MAX_DB_CONNECTIONS=200
    restart: unless-stopped
    depends_on:
      db_golang:
        condition: service_healthy
    # healthcheck:
    #   test: ["CMD", "nc", "-z", "127.0.0.1", "6432"]
    #   interval: 10s
    #   timeout: 5s
    #   retries: 5
    #   start_period: 10s
    networks:
      - app-network

volumes:
  pgdata_go:
    driver: local
    name: pgdata_go
  redis_data:
    driver: local
    name: redis_data
  nginx_logs:
    driver: local
    name: nginx_logs
  postgres_backup:
    driver: local
    name: postgres_backup

networks:
  app-network:
    driver: bridge
    name: go-template-network
