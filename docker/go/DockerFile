# Build stage
FROM golang:1.22.0-alpine AS builder

LABEL maintainer="Ckala"

# Установка зависимостей для сборки
RUN apk update && apk add --no-cache \
    git \
    ca-certificates \
    curl \
    && rm -rf /var/cache/apk/*

# Настройка рабочей директории
WORKDIR /app

# Копирование файлов зависимостей
COPY src/go.mod src/go.sum ./

# Загрузка зависимостей
RUN go mod download

# Копирование исходного кода
COPY src/ .

# Установка swag для генерации документации
RUN go install github.com/swaggo/swag/cmd/swag@latest

# Генерация Swagger документации
RUN swag init -g ./cmd/main.go -o ./docs

# Сборка приложения
RUN CGO_ENABLED=0 GOOS=linux go build \
    -a -installsuffix cgo \
    -ldflags '-extldflags "-static"' \
    -o app ./cmd/main.go

# Production stage
FROM alpine:3.18

# Установка необходимых сертификатов и создание пользователя
RUN apk --no-cache add ca-certificates tzdata \
    && addgroup -g 1001 appgroup \
    && adduser -u 1001 -G appgroup -s /bin/sh -D appuser

WORKDIR /app

# Копирование бинарного файла из builder stage
COPY --from=builder /app/app .
COPY --from=builder /app/docs ./docs

# Настройка прав доступа
RUN chown -R appuser:appgroup /app

# Переключение на non-root пользователя
USER appuser

# Открытие порта
EXPOSE 5000

# Проверка здоровья приложения
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/api/hello/healthcheck || exit 1

# Запуск приложения
CMD ["./app"]
